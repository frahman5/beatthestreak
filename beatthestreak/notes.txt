Notes:

1) Variables that can be played with to optimize strategy
   - Number of bots N
   - Top P players P
   - how those P players are distributed to bots N
   - when a mulligan is claimed
   - when a bot doubles down or chooses a single player, or even if they
       skip a day
   - how players chosen
       -> Top P global players modulo distribution?
           -> module distrubition?
           -> random distributon?
       -> Top P nightly players modulo distribution?
           -> module distrubition?
           -> random distributon?
       -> Top P global players filtered by opposing pitcher ERA modulo?
           -> module distrubition?
           -> random distributon?
       -> Top P nightly players taking into accuont opposing pitcher ERA
           -> modulo distrubition?
           -> random distrubiton?

2) Future refactorings:
    -> install FellThroughExceptions on all appropriate functions
    -> If putting up on github, test filepath.get_root() so that it returns
    the right stirng REGARDLESS of what the cwd is or which module is calling in
    -> create a single source of truth for update logic in bot

3) ToDo before starting mass simulations | DONE
    -> Achieve 100% line-coverage and logical coverage of all modules | DONE
        -> testBot | DONE
            -> lastHistory element and update_history buffer
                -> logical testing must occur in NPSimulation
        -> tsetFilePath | DONE
        -> testNPReporter
        -> testNPSimulation
        -> testPlayer | DONE
        -> testResearcher | DONE
        -> testRetrosheet | DONE
             -> 95% test coverage is acceptable, because stragglers are
             lines that just check for existing files
        -> testUtilities | DONE
        -> Buffers that need Checking: |DONE
            -> bot: lastHistory | DONE
            -> NPSimulation: botHistory Buffer | DONE
            -> Researcherwq: | DONE
                -> listOfGamesBuffer | DONE
                -> boxscoreBuffer | DONE
                -> playerInfoBuffer | DONE
    -> Updating reporting 
        -> include minPA | DONE
             -> in single simulation reporting | DONE
             -> in mass simulation reporting | DONE
        -> player choice method
            -> in single simulation reporting | DONE
            -> in mass simulation reporting | DONE
        --> Accomodate varying minPA, player selection method | DONE
              -> easiest way: filenames include mPA=???, sM=1
              -> adjust single simulations
        -> Include Top 5 streaks in ...
             -> single simulation | Done
             -> mass simulation | DONE
        -> Include DoubleDown info in mass simulate reporting
    -> Get mass_simulate working | DONE
        -> Make it update startDate every time around | DONE
        -> Make the progress bar tell you which individual simulation its running | DONE
        -> Make it treat bounds as RANGES, not endpoints | DONE
            -> Make it to batAveYears correctly | DONE
                -> currently its either not reporting the bataveYear correctly
                on excel file titles or its actually doing the wrong simulations
        -> Make the results reporting work | DONE

4) Necessary speedups in order for mass simulation to be viable (Using -d 2010 2009 20 20 benchmark)
     -> Move most critical function to C (using -d 2010 2009 20 20 benchmark) |
         -> 1) Determine which is most critical function 
                 -> 65% of simulate time: sim_next_day
                   -> 100% of sim_next_day time: sim_next_day_double
                         -> 29% of time in Researcher.did_start
                         -> 69.2% of time in bot.update_history
                             -> 98.5% of time in update_history_double_down
                                  -> 100% of time in Researcher.get_hit_info 
                                      ->96.4% of time in Researcher.did_get_hit
                                         ->89% of time in __search_boxscore
              Function: Researcher.__search_boxscore
                  Approximate time usage: 7.93 * .65 * .692 * .985 * .964  * .894
                      -> 3.028 seconds. Let's cut that to 0.001
         -> 2) Adapt testing code for that function/helpers
         -> 3) Code until tests pass
     -> Fix the next most time consuming part
        1) Which part?
              48% of simulate time: sim_next_day
                 -> 100% of sim_next_day: sim_next_day_double
                    -> 61% of sim_next_day_double: did_start
                       -> 88% of that time is spent seeing if the rId is in the
                          player_superset for the given day:
            Code : rId in player_superset:
                Approximate time usage: 6.15 * .48 * 1 * .61 * .88 
                     > 1.585 seconds. Let's cut that to 0.001
                ToDo: 
                   1) Fix tests for list_of_games_buffer (just reset the participants buffer) | DONE
                   2) test part_superset_buffer | DONE
      -> Next part:
        1) Which part?
              51.8% of simulate time: setup
                 -> 98.4% of setup time: __calc__players(self.batAveYear, self.minPA)
                    --> 99.8% of that time is spent initializing player objects
                       -> 62% of that time: set_bat_ave
                 Approximate time usage: 
                     Raw: 5.67 * .518 * .984 * .998: 1.792
                     Percent: .316
      -> Next part:
        1) Which part?
               46% of simulate time in sim_next_day
                  -> 100% of sim_next_day in sim_next_day_double_down
                      -> 70% of time in bot.update_history
                         -? 97% of time in __update_history_double_down
                            -> 94.4% of time in get_hit_info
                              -> 84.5% of time in c.did_get_hit
                                 -> 65.2% pf time in finish_did_get_hit
                  Approximate time usage:
                      Raw: 3.63 * .46 * 1 * .70 * .97 * 944 * .845 * .652 = 0.904
                      Percent: 24.9%
      -> Next part:
        1) Which part?
              31.4% of sim time in setup
                  95% of time self.__calc_players
                     99.7% of time in play __init__
                        50.9% in name_from_lahman_id
                           -> 15.1% of total time
                        49.1% in set_retrosheet_id 
                           -> 14.6% of total time
              25% in report_results
              44.5% in sim_next_day 
                  100% in sim_double_down
                      62%in update_history
                         96% in update_history_double_down
                             78.9% in c_did_get_hit
                                 45% in finish_did_get_hit
                                    -> 9% of total time
                                 34.4% in find_home_team
                                    -> 7.2% of total time



     -> Try removing unnecessary attributes from objects (like player, from bot)
     -> Consider running multiple N with the same P in parallel
     -> See if player's are redundantly calculating batting averages
4.1) Do one "code cleanup" for every optimization you do
     -> Have simulations for the same year all report to the same excel file
         -> SEVERELY slowed down the simulation (200% slowdown on benchmark -d 2010 2009 20 20)
         -> Instead, write a aggregate_results function that will combine
            all the individual sim results at the end (Or maybe not, this info wil lbe in mass_simulate results file)
     -> Clean up the startDate attribute
          Should NOT be an initialization factor. SHOULD be a parameter tp
          simulate and mass_simulate
5) ToDo after some mass simulations already done:
     -> Make it read results from indiv sim files if the indiv sim
           has already been done
     -> Allow yourself to var minPA as well as singleDown and DoubleDown