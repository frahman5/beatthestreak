Notes:

1) Variables that can be played with to optimize strategy
   - Number of bots N
   - Top P players P
   - how those P players are distributed to bots N
   - when a mulligan is claimed
   - when a bot doubles down or chooses a single player, or even if they
       skip a day
   - how players chosen
       -> Top P global players modulo distribution?
           -> module distrubition?
           -> random distributon?
       -> Top P nightly players modulo distribution?
           -> module distrubition?
           -> random distributon?
       -> Top P global players filtered by opposing pitcher ERA modulo?
           -> module distrubition?
           -> random distributon?
       -> Top P nightly players taking into accuont opposing pitcher ERA
           -> modulo distrubition?
           -> random distrubiton?

2) Future refactorings:
    -> install FellThroughExceptions on all appropriate functions
    -> If putting up on github, test filepath.get_root() so that it returns
    the right stirng REGARDLESS of what the cwd is or which module is calling in
    -> create a single source of truth for update logic in bot

3) ToDo before starting mass simulations | DONE
    -> Achieve 100% line-coverage and logical coverage of all modules | DONE
        -> testBot | DONE
            -> lastHistory element and update_history buffer
                -> logical testing must occur in NPSimulation
        -> tsetFilePath | DONE
        -> testNPReporter
        -> testNPSimulation
        -> testPlayer | DONE
        -> testResearcher | DONE
        -> testRetrosheet | DONE
             -> 95% test coverage is acceptable, because stragglers are
             lines that just check for existing files
        -> testUtilities | DONE
        -> Buffers that need Checking: |DONE
            -> bot: lastHistory | DONE
            -> NPSimulation: botHistory Buffer | DONE
            -> Researcherwq: | DONE
                -> listOfGamesBuffer | DONE
                -> boxscoreBuffer | DONE
                -> playerInfoBuffer | DONE
    -> Updating reporting 
        -> include minPA | DONE
             -> in single simulation reporting | DONE
             -> in mass simulation reporting | DONE
        -> player choice method
            -> in single simulation reporting | DONE
            -> in mass simulation reporting | DONE
        --> Accomodate varying minPA, player selection method | DONE
              -> easiest way: filenames include mPA=???, sM=1
              -> adjust single simulations
        -> Include Top 5 streaks in ...
             -> single simulation | Done
             -> mass simulation | DONE
        -> Include DoubleDown info in mass simulate reporting
    -> Get mass_simulate working | DONE
        -> Make it update startDate every time around | DONE
        -> Make the progress bar tell you which individual simulation its running | DONE
        -> Make it treat bounds as RANGES, not endpoints | DONE
            -> Make it to batAveYears correctly | DONE
                -> currently its either not reporting the bataveYear correctly
                on excel file titles or its actually doing the wrong simulations
        -> Make the results reporting work | DONE

4) Necessary speedups in order for mass simulation to be viable
     -> Move most critical function to C (using -d 2010 2009 20 20 benchmark) |
         -> 1) Determine which is most critical function 
                 -> 65% of simulate time: sim_next_day
                   -> 100% of sim_next_day time: sim_next_day_double
                         -> 29% of time in Researcher.did_start
                         -> 69.2% of time in bot.update_history
                             -> 98.5% of time in update_history_double_down
                                  -> 100% of time in Researcher.get_hit_info 
                                      ->96.4% of time in Researcher.did_get_hit
                                         ->89% of time in __search_boxscore
              Function: Researcher.__search_boxscore
                  Approximate time usage: 7.93 * .65 * .692 * .985 * .964  * .894
                      -> 3.028 seconds. Let's cut that to 0.001
         -> 2) Adapt testing code for that function/helpers
         -> 3) Code until tests pass
     -> Fix the next most time consuming part
        1) Which part?
              48% of simulate time: sim_next_day
                 -> 100% of sim_next_day: sim_next_day_double
                    -> 61% of sim_next_day_double: did_start
                       -> 88% of that time is spent seeing if the rId is in the
                          player_superset for the given day:
            Code : rId in player_superset:
                Approximate time usage: 6.15 * .48 * 1 * .61 * .88 
                     > 1.585 seconds. Let's cut that to 0.001
     -> Try removing unnecessary attributes from objects (like player, from bot)
     -> Consider running multiple N with the same P in parallel
     -> See if player's are redundantly calculating batting averages
4.1) Do one "code cleanup" for every optimization you do
     -> Have simulations for the same year all report to the same excel file
     -> Clean up the startDate attribute
          Should NOT be an initialization factor. SHOULD be a parameter tp
          simulate and mass_simulate
5) ToDo after some mass simulations already done:
     -> Make it read results from indiv sim files if the indiv sim
           has already been done
     -> Allow yourself to var minPA as well as singleDown and DoubleDown

TODO UPON RETURN: edit get_third_num_in_string function to not count things like 2b
  -> Also put tests in did_get_hit for players in EVERY position